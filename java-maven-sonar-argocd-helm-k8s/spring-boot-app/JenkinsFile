pipeline {
  agent {
    docker {
      image 'maven:3.9.3-eclipse-temurin-17'
      args """
        --user root \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /var/lib/jenkins/workspace:/var/lib/jenkins/workspace \
        --network host \
        --security-opt apparmor=unconfined
      """
    }
  }

  stages {

    stage('Checkout') {
      steps {
        sh 'echo passed'
        // git branch: 'main', url: 'https://github.com/vasanth-86/jenkins-java-sonarqube-k8s.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://34.47.142.116:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.projectKey=spring-boot-demo \
              -Dsonar.host.url=${SONAR_URL} \
              -Dsonar.login=${SONAR_AUTH_TOKEN}
          '''
        }
      }
    }

    stage('Install Docker CLI') {
      steps {
        sh '''
          apt-get update && apt-get install -y docker.io
          docker --version
        '''
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "vasanth8694/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      agent any
      environment {
        GIT_REPO_NAME = "jenkins-java-sonarqube-k8s"
      }
      steps {
        // Fresh checkout on Jenkins host (not Docker)
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[
            url: 'https://github.com/vasanth-86/jenkins-java-sonarqube-k8s.git',
            credentialsId: 'github'
          ]]
        ])

        withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
          sh '''
            echo "Running git update outside Docker"
            ls -a
            git config user.email "vasantheeswaransakthivel@gmail.com"
            git config user.name "${GIT_USER}"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GIT_USER}:${GIT_TOKEN}@github.com/${GIT_USER}/${GIT_REPO_NAME}.git HEAD:main
          '''
        }
      }
    }
  }
}
