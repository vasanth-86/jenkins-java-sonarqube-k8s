pipeline {
  agent {
    docker {
      image 'maven:3.9.3-eclipse-temurin-17'
      // Do NOT try to use ${WORKSPACE} here â€” it's not available at parse time.
      args """
        --user root \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --network host \
        --security-opt apparmor=unconfined
      """
    }
  }

  environment {
    SONAR_HOST_URL = 'http://10.160.0.6:9000'     // adjust if needed
    SONAR_LOGIN = credentials('sonar-token')      // adjust credential id if needed
  }

  stages {

    stage('Checkout') {
      steps {
        // ensure git is present in the container, then checkout the repo inside container
        sh '''
          echo "=== Checkout Stage ==="
          apt-get update -y || true
          if ! command -v git >/dev/null 2>&1; then
            echo "Installing git inside container..."
            apt-get install -y git || true
          fi
        '''
        // Run Jenkins SCM checkout inside the container (this creates .git here)
        checkout scm

        sh '''
          echo "Repository contents:"
          pwd
          ls -la
          echo "Git status:"
          git status
        '''
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          echo "=== Build and Test Stage ==="
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            echo "=== Static Code Analysis Stage ==="
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar \
              -Dsonar.projectKey=spring-boot-app \
              -Dsonar.host.url=${SONAR_HOST_URL} \
              -Dsonar.login=${SONAR_AUTH_TOKEN}
          '''
        }
      }
    }

    stage('Install Docker CLI') {
      steps {
        sh '''
          echo "=== Install Docker CLI Stage ==="
          apt-get update -y
          apt-get install -y docker.io || true
          docker --version || true
        '''
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([string(credentialsId: 'docker', variable: 'DOCKER_PW')]) {
          sh '''
            echo "=== Build and Push Docker Image Stage ==="
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t vasanth8694/spring-boot-app:${BUILD_NUMBER} .
            echo ${DOCKER_PW} | docker login -u vasanth8694 --password-stdin
            docker push vasanth8694/spring-boot-app:${BUILD_NUMBER}
          '''
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github-1', variable: 'GITHUB_TOKEN')]) {
          sh '''
            echo "=== Update Deployment File Stage ==="
            echo "Current directory: $(pwd)"
            ls -la

            git config user.email "vasantheeswaransakthivel@gmail.com"
            git config user.name "vasanth-86"

            # Update image tag in deployment manifest
            sed -i "s|image: .*|image: vasanth8694/spring-boot-app:${BUILD_NUMBER}|g" \
              java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            # Commit & push only if changed
            if git diff --quiet --exit-code; then
              echo "No changes to commit"
            else
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/vasanth-86/jenkins-java-sonarqube-k8s.git HEAD:main
            fi
          '''
        }
      }
    }
  }

  post {
    success {
      echo "Pipeline succeeded: ${env.BUILD_URL}"
    }
    failure {
      echo "Pipeline failed: ${env.BUILD_URL}"
    }
  }
}
